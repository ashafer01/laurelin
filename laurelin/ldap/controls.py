from __future__ import absolute_import
from .exceptions import LDAPError, LDAPExtensionError, LDAPSupportError
from .rfc4511 import (
    LDAPOID,
    Criticality,
    Control as _Control,
    Controls,
    ControlValue,
)
import six
from six.moves import range

_requestControls = {}
_responseControls = {}

# this gets automatically generated by the reserve_kwds.py script
_reservedKwds = set(['DN', 'OID', 'attr', 'attrs', 'attrsDict', 'attrsOnly', 'baseDN', 'cleanAttr', 'current', 'derefAliases', 'dn', 'fetchResultRefs', 'filter', 'followReferrals', 'ldapConn', 'limit', 'mID', 'mech', 'modlist', 'newParent', 'newRDN', 'password', 'rdnAttr', 'relativeSearchScope', 'requireSuccess', 'scope', 'searchTimeout', 'self', 'tag', 'username', 'value'])


def processKwds(method, kwds, supportedCtrls, defaultCriticality, final=False):
    """Process keyword arguments for registered controls, returning a protocol-level Controls

     Removes entries from kwds as they are used, allowing the same dictionary to be passed on
     to another function which may have statically defined arguments. If final is True, then a
     TypeError will be raised if all kwds are not exhausted.
    """
    i = 0
    ctrls = Controls()
    for kwd in list(kwds.keys()):
        if kwd in _requestControls:
            ctrl = _requestControls[kwd]
            if method not in ctrl.method:
                raise LDAPError('Control keyword {0} not allowed for method "{1}"'.format(kwd, method))
            ctrlValue = kwds.pop(kwd)
            if isinstance(ctrlValue, critical):
                criticality = True
                ctrlValue = ctrlValue.value
            elif isinstance(ctrlValue, optional):
                criticality = False
                ctrlValue = ctrlValue.value
            else:
                criticality = defaultCriticality
            if criticality and (ctrl.REQUEST_OID not in supportedCtrls):
                raise LDAPSupportError('Critical control keyword {0} is not supported by the server'.format(kwd))
            ctrls.setComponentByPosition(i, ctrl.prepare(ctrlValue, criticality))
            i += 1
    if final and (len(kwds) > 0):
        raise TypeError('Unhandled keyword arguments: {0}'.format(', '.join(kwds.keys())))
    if i > 0:
        return ctrls
    else:
        return None


def handleResponse(obj, controls):
    """Handle response control values and set attributes on the given object.

     Accepts any object to set attributes on, and an rfc4511.Controls instance
     from a server response.
    """

    # controls may be None or zero-length depending on pyasn1 version
    if controls:
        for i in range(len(controls)):
            control = controls.getComponentByPosition(i)
            ctrlOID = six.text_type(control.getComponentByName('controlType'))
            try:
                ctrl = _responseControls[ctrlOID]
            except KeyError:
                raise LDAPExtensionError('No response control defined for {0}'.format(ctrlOID))
            value = ctrl.handle(control.getComponentByName('controlValue'))
            if not hasattr(obj, ctrl.responseAttr):
                setattr(obj, ctrl.responseAttr, value)
            else:
                raise LDAPExtensionError('Response control attribute "{0}" is already defined on the object'.format(ctrl.responseAttr))


class MetaControl(type):
    """Metaclass which registers instances of subclasses"""
    def __new__(meta, name, bases, dct):
        cls = type.__new__(meta, name, bases, dct)
        instance = cls()
        if cls.REQUEST_OID:
            if not cls.method:
                raise ValueError('no method set on control {0}'.format(name))
            if not cls.keyword:
                raise ValueError('no keyword set on control {0}'.format(name))
            if cls.keyword in _reservedKwds:
                raise LDAPExtensionError('Control keyword "{0}" is reserved'.format(cls.keyword))
            if cls.keyword in _requestControls:
                raise LDAPExtensionError('Control keyword "{0}" is already defined'.format(cls.keyword))
            _requestControls[cls.keyword] = instance

        if cls.RESPONSE_OID:
            if not cls.responseAttr:
                raise ValueError('Missing responseAttr on control {0}'.format(name))
            if cls.RESPONSE_OID in _responseControls:
                raise LDAPExtensionError('Response control OID {0} is already defined'.format(cls.RESPONSE_OID))
            _responseControls[cls.RESPONSE_OID] = instance

        return cls


@six.add_metaclass(MetaControl)
class Control(object):
    """
     Request controls are exposed by allowing an additional keyword argument on
     a set of methods. The prepare() method takes the value passed in as a
     keyword argument and returns an rfc4511.Control.

     Response controls are returned by setting an additional attribute on
     whichever object is returned by the called method. The raw response
     controlValue is passed to the handle() method, and any appropriate value
     may be returned.

     Leave the RESPONSE_OID and responseAttr attributes as a False value if
     there is no response control specified.
    """

    method = ()       # name(s) of the method which this control is used with
    keyword = ''      # keyword argument name
    responseAttr = '' # Name of the attribute where return of handle() will be stored
    REQUEST_OID = ''  # Request OID of the control
    RESPONSE_OID = '' # Response OID of the control (may be equal to REQUEST_OID; may be left empty)

    def prepare(self, ctrlValue, criticality):
        """Accepts string controlValue and returns an rfc4511.Control instance"""
        c = _Control()
        c.setComponentByName('controlType', LDAPOID(self.REQUEST_OID))
        c.setComponentByName('criticality', Criticality(criticality))
        if ctrlValue:
            c.setComponentByName('controlValue', ControlValue(ctrlValue))
        return c

    def handle(self, ctrlValue):
        """Accepts raw response ctrlValue and may return any useful value"""
        raise NotImplementedError()


class critical(object):
    """used to mark controls with criticality"""
    def __init__(self, value):
        self.value = value


class optional(object):
    """used to mark controls as not having criticality"""
    def __init__(self, value):
        self.value = value
