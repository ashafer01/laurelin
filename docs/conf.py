#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# laurelin documentation build configuration file, created by
# sphinx-quickstart on Thu Feb  8 17:11:12 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
from sphinx.domains.python import PythonDomain
from sphinx.ext.autodoc import FunctionDocumenter
sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('..'))

from laurelin.ldap import attributetype, objectclass, rules

attributetype._skip_registration = True
objectclass._skip_registration = True
rules._skip_registration = True


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.intersphinx',
              'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'laurelin'
copyright = '2018, Alex Shafer'
author = 'Alex Shafer'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

with open(os.path.join('..', 'VERSION')) as f:
    # The full version, including alpha/beta/rc tags.
    release = f.read().strip()

# The short X.Y version.
version = '.'.join(release.split('.')[0:2])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'globaltoc.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'laurelindoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'laurelin.tex', 'laurelin Documentation',
     'Alex Shafer', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'laurelin', 'laurelin Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'laurelin', 'laurelin Documentation',
     author, 'laurelin', 'One line description of project.',
     'Miscellaneous'),
]


# intersphinx: refer to the Python 3 standard library
intersphinx_mapping = {'https://docs.python.org/3/': None}


# Make cross-references resolve to laurelin.ldap.Object if available

_desired_base_module = 'laurelin.ldap'


class LaurelinPythonDomain(PythonDomain):
    def find_obj(self, env, modname, classname, name, type, searchmode=0):
        """Ensures an object always resolves to laurelin.ldap.Object if defined there."""
        desired_name = _desired_base_module + '.' + name.strip('.')
        matches = PythonDomain.find_obj(self, env, modname, classname, name, type, searchmode)
        for match in matches:
            match_name = match[0]
            if match_name == desired_name:
                return [match]
        return matches


def setup(sphinx):
    """Use LaurelinPythonDomain in place of PythonDomain"""
    sphinx.override_domain(LaurelinPythonDomain)


# Make functions use the __name__ attribute

_base_format_name = FunctionDocumenter.format_name


def _format_func_name(self):
    formatted_name = _base_format_name(self)
    func_name = self.object.__name__
    if not formatted_name.endswith('.' + func_name):
        name_parts = formatted_name.split('.')
        name_parts[-1] = func_name
        formatted_name = '.'.join(name_parts)
    return formatted_name


FunctionDocumenter.format_name = _format_func_name
